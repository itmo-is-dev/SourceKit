using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using SourceKit.Generators.Builder.Annotations;
using SourceKit.Generators.Builder.Generators;
using SourceKit.Tests.Tools;
using Xunit;
using Verifier = Microsoft.CodeAnalysis.CSharp.Testing.CSharpSourceGeneratorVerifier<
    SourceKit.Generators.Builder.Generators.BuilderSourceGenerator,
    Microsoft.CodeAnalysis.Testing.Verifiers.XUnitVerifier>;

namespace SourceKit.Tests.Generators;

public class BuilderTests
{
    [Fact]
    public async Task BuilderSourceGenerator_ShouldGenerateCorrectBuilderType()
    {
        var test = new CSharpSourceGeneratorTest<BuilderSourceGenerator, XUnitVerifier>
        {
            TestState =
            {
                Sources =
                {
                    await SourceFile.LoadAsync("SourceKit.Sample/Generators/SomeQuery.cs"),
                },
                GeneratedSources =
                {
                    new SourceFile(GeneratedBuilderName, GeneratedBuilder),
                },
                AdditionalReferences = { typeof(GenerateBuilderAttribute).Assembly },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net60,
            },
        };

        await test.RunAsync();
    }

    [Fact]
    public async Task BuilderSourceGenerator_ShouldGenerateCorrectBuilderType_WhenPropertyIsArray()
    {
        var test = new CSharpSourceGeneratorTest<BuilderSourceGenerator, XUnitVerifier>
        {
            TestState =
            {
                Sources =
                {
                    await SourceFile.LoadAsync("SourceKit.Sample/Generators/ArrayQuery.cs"),
                },
                GeneratedSources =
                {
                    new SourceFile(GeneratedArrayBuilderName, GeneratedArrayBuilder),
                },
                AdditionalReferences = { typeof(GenerateBuilderAttribute).Assembly },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net60,
            },
        };

        await test.RunAsync();
    }

    [Fact]
    public async Task BuilderSourceGenerator_ShouldGenerateCorrectBuilderType_WhenPropertyHasCustomType()
    {
        var test = new CSharpSourceGeneratorTest<BuilderSourceGenerator, XUnitVerifier>
        {
            TestState =
            {
                Sources =
                {
                    await SourceFile.LoadAsync("SourceKit.Sample/Generators/ArrayQuery.cs"),
                },
                GeneratedSources =
                {
                    new SourceFile(GeneratedArrayBuilderName, GeneratedArrayBuilder),
                },
                AdditionalReferences = { typeof(GenerateBuilderAttribute).Assembly },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net60,
            },
        };

        await test.RunAsync();
    }

    private const string GeneratedBuilderName = """
SourceKit.Generators.Builder/SourceKit.Generators.Builder.Generators.BuilderSourceGenerator/SomeQuery.SourceKit.Generation.Builder.g.cs
""";

    private const string GeneratedBuilder = """
// <auto-generated>
// This code was generated by a SourceKit.Builder code generator.
// https://github.com/itmo-is-dev/SourceKit
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;

namespace SourceKit.Sample.Generators
{
    public partial record SomeQuery
    {
        public static SomeQuery Build(Func<Builder, Builder> action)
        {
            return action(new Builder()).Build();
        }

        public sealed class Builder
        {
            private readonly List<System.Guid> _ids;
            private Int32 _count;
            private Nullable<System.Int32> _orderById;
            public Builder()
            {
                _ids = new List<System.Guid>();
                _count = default;
                _orderById = default;
            }

            public Builder WithId(Guid element)
            {
                _ids.Add(element);
                return this;
            }

            public Builder WithIds(IEnumerable<System.Guid> elements)
            {
                _ids.AddRange(elements);
                return this;
            }

            public Builder WithCount(Int32 value)
            {
                _count = value;
                return this;
            }

            public Builder WithOrderById(Nullable<System.Int32> value)
            {
                _orderById = value;
                return this;
            }

            public SomeQuery Build()
            {
                return new SomeQuery(_ids.Distinct().ToArray(), _count, _orderById);
            }
        }
    }
}
""";
    
    private const string GeneratedArrayBuilderName = """
SourceKit.Generators.Builder/SourceKit.Generators.Builder.Generators.BuilderSourceGenerator/ArrayQuery.SourceKit.Generation.Builder.g.cs
""";

    private const string GeneratedArrayBuilder = """
// <auto-generated>
// This code was generated by a SourceKit.Builder code generator.
// https://github.com/itmo-is-dev/SourceKit
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;

namespace SourceKit.Sample.Generators
{
    public partial record ArrayQuery
    {
        public static ArrayQuery Build(Func<Builder, Builder> action)
        {
            return action(new Builder()).Build();
        }

        public sealed class Builder
        {
            private readonly List<System.Guid> _ids;
            public Builder()
            {
                _ids = new List<System.Guid>();
            }

            public Builder WithId(Guid element)
            {
                _ids.Add(element);
                return this;
            }

            public Builder WithIds(IEnumerable<System.Guid> elements)
            {
                _ids.AddRange(elements);
                return this;
            }

            public ArrayQuery Build()
            {
                return new ArrayQuery(_ids.Distinct().ToArray());
            }
        }
    }
}
""";
}