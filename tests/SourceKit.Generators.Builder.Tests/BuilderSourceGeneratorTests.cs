using SourceKit.Generators.Builder.Annotations;
using SourceKit.Generators.Builder.Generators;
using SourceKit.Tests.Common;
using SourceKit.Tests.Common.TestBases;
using Xunit;

namespace SourceKit.Generators.Builder.Tests;

public class BuilderSourceGeneratorTests : GeneratorTestBase<BuilderSourceGenerator>
{
    [Fact]
    public async Task ShouldGenerateCorrectBuilderType()
    {
        SourceFile sourceFile = await SourceFile.LoadAsync("SourceKit.Generators.Builder.Samples/SomeQuery.cs");

        var generatedSource = new SourceFile(
            Name: """
            SourceKit.Generators.Builder/SourceKit.Generators.Builder.Generators.BuilderSourceGenerator/SomeQuery.SourceKit.Generation.Builder.g.cs
            """,
            Content: """
            // <auto-generated>
            // This code was generated by a SourceKit.Generators.Builder code generator.
            // https://github.com/itmo-is-dev/SourceKit
            // </auto-generated>
            #pragma warning disable CS1591
            using SourceKit.Generators.Builder.Annotations;
            using System;
            using System.Collections.Generic;
            using System.Linq;

            namespace SourceKit.Generators.Builder.Samples
            {
                public partial record SomeQuery
                {
                    public static SomeQuery Build(Func<Builder, Builder> action)
                    {
                        return action(new Builder()).Build();
                    }

                    public sealed partial class Builder
                    {
                        private readonly List<System.Guid> _ids;
                        private Int32 _count;
                        private Nullable<System.Int32> _orderById;
                        public Builder()
                        {
                            _ids = new List<System.Guid>();
                            _count = default;
                            _orderById = default;
                        }

                        [InitializesPropertyAttribute(nameof(Ids))]
                        public Builder WithId(Guid element)
                        {
                            _ids.Add(element);
                            return this;
                        }

                        [InitializesPropertyAttribute(nameof(Ids))]
                        public Builder WithIds(IEnumerable<System.Guid> elements)
                        {
                            _ids.AddRange(elements);
                            return this;
                        }

                        [InitializesPropertyAttribute(nameof(Count))]
                        public Builder WithCount(Int32 value)
                        {
                            _count = value;
                            return this;
                        }

                        [InitializesPropertyAttribute(nameof(OrderById))]
                        public Builder WithOrderById(Nullable<System.Int32> value)
                        {
                            _orderById = value;
                            return this;
                        }

                        public SomeQuery Build()
                        {
                            return new SomeQuery(_ids.Distinct().ToArray(), _count, _orderById);
                        }
                    }
                }
            }
            """);

        await GeneratorTest
            .WithSource(sourceFile)
            .WithGeneratedSource(generatedSource)
            .WithAdditionalReference(typeof(GenerateBuilderAttribute).Assembly)
            .Build()
            .RunAsync();
    }

    [Fact]
    public async Task ShouldGenerateCorrectBuilderType_WhenPropertyIsArray()
    {
        SourceFile sourceFile = await SourceFile.LoadAsync("SourceKit.Generators.Builder.Samples/ArrayQuery.cs");

        var generatedSource = new SourceFile(
            Name: """
            SourceKit.Generators.Builder/SourceKit.Generators.Builder.Generators.BuilderSourceGenerator/ArrayQuery.SourceKit.Generation.Builder.g.cs
            """,
            Content: """
            // <auto-generated>
            // This code was generated by a SourceKit.Generators.Builder code generator.
            // https://github.com/itmo-is-dev/SourceKit
            // </auto-generated>
            #pragma warning disable CS1591
            using SourceKit.Generators.Builder.Annotations;
            using System;
            using System.Collections.Generic;
            using System.Linq;

            namespace SourceKit.Generators.Builder.Samples
            {
                public partial record ArrayQuery
                {
                    public static ArrayQuery Build(Func<Builder, Builder> action)
                    {
                        return action(new Builder()).Build();
                    }

                    public sealed partial class Builder
                    {
                        private readonly List<System.Guid> _ids;
                        public Builder()
                        {
                            _ids = new List<System.Guid>();
                        }

                        [InitializesPropertyAttribute(nameof(Ids))]
                        public Builder WithId(Guid element)
                        {
                            _ids.Add(element);
                            return this;
                        }

                        [InitializesPropertyAttribute(nameof(Ids))]
                        public Builder WithIds(IEnumerable<System.Guid> elements)
                        {
                            _ids.AddRange(elements);
                            return this;
                        }

                        public ArrayQuery Build()
                        {
                            return new ArrayQuery(_ids.Distinct().ToArray());
                        }
                    }
                }
            }
            """);

        await GeneratorTest
            .WithSource(sourceFile)
            .WithGeneratedSource(generatedSource)
            .WithAdditionalReference(typeof(GenerateBuilderAttribute).Assembly)
            .Build()
            .RunAsync();
    }

    [Fact]
    public async Task ShouldGenerateCorrectBuilderType_WhenPropertyHasCustomType()
    {
        SourceFile sourceFile = await SourceFile.LoadAsync("SourceKit.Generators.Builder.Samples/ArrayQuery.cs");

        var generatedSource = new SourceFile(
            Name: """
            SourceKit.Generators.Builder/SourceKit.Generators.Builder.Generators.BuilderSourceGenerator/ArrayQuery.SourceKit.Generation.Builder.g.cs
            """,
            Content: """
            // <auto-generated>
            // This code was generated by a SourceKit.Generators.Builder code generator.
            // https://github.com/itmo-is-dev/SourceKit
            // </auto-generated>
            #pragma warning disable CS1591
            using SourceKit.Generators.Builder.Annotations;
            using System;
            using System.Collections.Generic;
            using System.Linq;

            namespace SourceKit.Generators.Builder.Samples
            {
                public partial record ArrayQuery
                {
                    public static ArrayQuery Build(Func<Builder, Builder> action)
                    {
                        return action(new Builder()).Build();
                    }

                    public sealed partial class Builder
                    {
                        private readonly List<System.Guid> _ids;
                        public Builder()
                        {
                            _ids = new List<System.Guid>();
                        }

                        [InitializesPropertyAttribute(nameof(Ids))]
                        public Builder WithId(Guid element)
                        {
                            _ids.Add(element);
                            return this;
                        }

                        [InitializesPropertyAttribute(nameof(Ids))]
                        public Builder WithIds(IEnumerable<System.Guid> elements)
                        {
                            _ids.AddRange(elements);
                            return this;
                        }

                        public ArrayQuery Build()
                        {
                            return new ArrayQuery(_ids.Distinct().ToArray());
                        }
                    }
                }
            }
            """);

        await GeneratorTest
            .WithSource(sourceFile)
            .WithGeneratedSource(generatedSource)
            .WithAdditionalReference(typeof(GenerateBuilderAttribute).Assembly)
            .Build()
            .RunAsync();
    }

    [Fact]
    public async Task ShouldGenerateCorrectBuilderType_WhenPropertyHasBuilderConstructorParameterAttribute()
    {
        SourceFile sourceFile = await SourceFile.LoadAsync(
            "SourceKit.Generators.Builder.Samples/BuilderConstructorParameter/IntegerConstructorParameterQuery.cs");

        var generatedSource = new SourceFile(
            Name: """
            SourceKit.Generators.Builder/SourceKit.Generators.Builder.Generators.BuilderSourceGenerator/IntegerConstructorParameterQuery.SourceKit.Generation.Builder.g.cs
            """,
            Content: """
            // <auto-generated>
            // This code was generated by a SourceKit.Generators.Builder code generator.
            // https://github.com/itmo-is-dev/SourceKit
            // </auto-generated>
            #pragma warning disable CS1591
            using SourceKit.Generators.Builder.Annotations;
            using System;
            using System.Collections.Generic;
            using System.Linq;
            
            namespace SourceKit.Generators.Builder.Samples.BuilderConstructorParameter
            {
                public partial record IntegerConstructorParameterQuery
                {
                    public static IntegerConstructorParameterQuery Build(Nullable<System.Int32> Id, Func<Builder, Builder> action)
                    {
                        return action(new Builder(Id)).Build();
                    }
            
                    public sealed partial class Builder
                    {
                        private Nullable<System.Int32> _id;
                        private String _value;
                        public Builder(Nullable<System.Int32> Id)
                        {
                            _id = Id;
                            _value = string.Empty;
                        }
            
                        [InitializesPropertyAttribute(nameof(Id))]
                        public Builder WithId(Nullable<System.Int32> value)
                        {
                            _id = value;
                            return this;
                        }
            
                        [InitializesPropertyAttribute(nameof(Value))]
                        public Builder WithValue(String value)
                        {
                            _value = value;
                            return this;
                        }
            
                        public IntegerConstructorParameterQuery Build()
                        {
                            return new IntegerConstructorParameterQuery(_id, _value);
                        }
                    }
                }
            }
            """);

        await GeneratorTest
            .WithSource(sourceFile)
            .WithGeneratedSource(generatedSource)
            .WithAdditionalReference(typeof(GenerateBuilderAttribute).Assembly)
            .Build()
            .RunAsync();
    }
}